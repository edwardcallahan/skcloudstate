version: 2.1
orbs:
  # https://circleci.com/orbs/registry/orb/circleci/kubernetes
  kubernetes: circleci/kubernetes@0.3.0
  # https://circleci.com/orbs/registry/orb/circleci/helm
  helm: circleci/helm@0.1.2
  # https://circleci.com/orbs/registry/orb/ccpgames/minikube
  minikube: ccpgames/minikube@0.0.1

commands:
  setup_sbt:
    description: "Set up SBT"
    parameters:
      version:
        type: string
        default: "1.3.3"
    steps:
    - run:
        name: Install SBT
        command: |
          curl -L -o sbt-<< parameters.version >>.deb https://dl.bintray.com/sbt/debian/sbt-<< parameters.version >>.deb
          sudo dpkg -i sbt-<< parameters.version >>.deb
          rm sbt-<< parameters.version >>.deb
    - restore_cache:
        key: sbt-cache-2

  save_sbt_cache:
    description: "Save SBT cache"
    steps:
    - save_cache:
        key: sbt-cache-2
        paths:
          - "~/.ivy2/cache"
          - "~/.sbt"
          - "~/.m2"
          - "~/.coursier"

  setup_npm:
    description: "Set up npm"
    steps:
    - run:
        name: Install nmp
        command:
          cd node-support
          npm install
          cd ../samples/js-shopping-cart/
          npm install
          cd -


jobs:
  native-image:
    machine: true
    resource_class: large
#   image: ubuntu-1604:201903-01
#    docker_layer_caching: false    # default - false
    steps:
    - checkout
    - setup_sbt
    - run:
        name: machine update
        no_output_timeout: 10m
        command:
          set -e
          sudo killall apt-get
          sudo apt-get install -q -y software-properties-common
          wget -qO adopt.key - https://adoptopenjdk.jfrog.io/adoptopenjdk/api/gpg/key/public
          sudo apt-key add adopt.key
          sudo apt-get -q -y update
    - run:
        name: install adoptopenjdk-11-openj9
        no_output_timeout: 10m
        command:
          set -e
          sudo killall apt-get
          sudo add-apt-repository -y https://adoptopenjdk.jfrog.io/adoptopenjdk/deb/
          sudo apt-get -q -y update
          sudo apt-get install -q -y adoptopenjdk-11-openj9/xenial
    - run:
        name: Setup Bash Env
        command: |
          echo 'export JAVA_HOME="/usr/lib/jvm/adoptopenjdk-11-openj9-amd64/"' >> $BASH_ENV
          echo 'export PATH="$JAVA_HOME/bin:$PATH"' >> $BASH_ENV
          echo 'export SBT_OPTS="-Xms4G -Xmx4G -Xss2M -XX:MaxMetaspaceSize=4G"' >> $BASH_ENV
    - run:
        name: native build
        command: sbt 'dockerBuildNativeInMemory publishLocal'
        timeout: 20m
        no_output_timeout: 15m

  native-image2:
    docker:
      - image: shopstic/circleci-graalvm-sbt:1.1.5
        environment:
          JVM_OPTS: "-Xms4G -Xmx4G "
          SBT_OPTS: "-Xms4G -Xmx4G -Xss2M -XX:MaxMetaspaceSize=4G "
    steps:
      - checkout
      - setup_sbt
      - run:
          name: native build
          command: sbt 'dockerBuildNativeInMemory publishLocal'
          timeout: 20m
          no_output_timeout: 15m

  minikube_try:
    machine:
      image: ubuntu-1604:201903-01
    resource_class: large
    steps:
      - checkout
      - kubernetes/install
      - minikube/minikube-install:
          version: v1.2.0
      - run:
          # Create a minikube cluster to install helm charts into
          name: create k8s cluster
          command: sudo -E minikube start --vm-driver=none --cpus $(nproc) --memory 4096
          environment:
            CHANGE_MINIKUBE_NONE_USER: true
      - run:
          name: enable ingress
          command: sudo minikube addons enable ingress
      - run:
          command: |
            kubectl cluster-info
            kubectl get po --all-namespaces
      - setup_sbt
      - run: sbt -Ddocker.username=cloudstatedev -Ddocker.tag=dev -Duse.native.builds=false operator/docker:publishLocal operator/compileK8sDescriptors "dockerBuildAllNonNative publishLocal"
      - run:
          command: |
            kubectl create namespace cloudstate
            kubectl apply -n cloudstate -f operator/cloudstate-dev.yaml
      - run:
          command: |
              if ! kubectl wait --for=condition=available --timeout=60s -n cloudstate deployment/cloudstate-operator
              then
                kubectl describe -n cloudstate deployment/cloudstate-operator
                kubectl logs -l app=cloudstate-operator -n cloudstate
              fi

  format_checks:
    docker:
    - image: oracle/graalvm-ce:latest
    steps:
    - checkout
    - setup_sbt
    - run: sbt scalafmtCheckAll scalafmtSbtCheck || { echo "[error] Code not formatted prior to commit. Run 'sbt scalafmtAll scalafmtSbt' then commit the reformatted code."; false; }
    - save_sbt_cache

  sbt_tests:
    docker:
      - image: circleci/openjdk:8
    steps:
      - checkout
      - setup_sbt
      - run: sbt test
      - save_sbt_cache

  sbt-test-compile:
    docker:
      - image: circleci/openjdk:8
    steps:
      - checkout
      - setup_sbt
      - run: sbt update test:compile
      - save_sbt_cache

  doc_tests:
    docker:
      - image: ayltai/circleci-openjdk-node:jdk8-node10
    steps:
      - checkout
      - setup_sbt
      - setup_npm
      - run: sbt 'set concurrentRestrictions in Global += Tags.limitAll(1)' docs/paradox docs/test
      - run: cd docs/src/test/js && npm install && cd -
      - run: cd docs/src/test/js && npm test && cd -
      - save_sbt_cache

  minikube_tests:
    machine: true
    environment:
      K8S_VERSION: v1.10.0
      KUBECONFIG: /home/circleci/.kube/config
      MINIKUBE_VERSION: V0.30.0
      MINIKUBE_WANTUPDATENOTIFICATION: false
      MINIKUBE_WANTREPORTERRORPROMPT: false
      MINIKUBE_HOME: /home/circleci
      CHANGE_MINIKUBE_NONE_USER: true
    steps:
      - checkout
      - setup_sbt
      - run:
          name: checkDockerImages
          command: docker images
      - run:
          name: setup kubectl
          command: |
            curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/${K8S_VERSION}/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
            mkdir -p ${HOME}/.kube
            touch ${HOME}/.kube/config
      - run:
          name: setup minikube
          command: |
            curl -Lo minikube https://github.com/kubernetes/minikube/releases/download/${MINIKUBE_VERSION}/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
#      - run:
#          name: setup helm
#          command: curl https://raw.githubusercontent.com/helm/helm/master/scripts/get | bash
      - run:
          name: start minikube
          command: |
            sudo -E minikube start --vm-driver=none --cpus 2 --memory 2048 --kubernetes-version=${K8S_VERSION} &> $HOME/minikube.log 2>&1 < /dev/null
      - run:
          name: wait for minikube
          command: |
            JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}';
            until kubectl get nodes -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do
              sleep 1;
            done
#      - run:
#          name: fix RBAC
#          command: |
#            # make default account cluster-admin
#            kubectl create clusterrolebinding add-on-cluster-admin --clusterrole cluster-admin --serviceaccount=kube-system:default
      - run:
          name: dump cluster-info
          command: |
            kubectl cluster-info
            kubectl get po --all-namespaces
      - run:
          name: install helm in cluster
          command: |
            kubectl -n kube-system create sa tiller
            kubectl create clusterrolebinding tiller --clusterrole cluster-admin --serviceaccount=kube-system:tiller
            helm init --wait --service-account tiller
      - run:
          name: DeplyCloudState
          command: |
            kubectl create namespace cloudstate
            kubectl apply -n cloudstate -f operator/cloudstate-dev.yaml
      - run:
          name: VerifyCloudStateDeployment
          command: |
            if ! kubectl wait --for=condition=available --timeout=60s -n cloudstate deployment/cloudstate-operator
            then
                kubectl describe -n cloudstate deployment/cloudstate-operator
                kubectl logs -l app=cloudstate-operator -n cloudstate
            fi

workflows:
  version: 2

  build:
    jobs:
      - native-image
